// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-float64ndarray-like@v0.2.2-esm/index.mjs";import{isPrimitive as t}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-negative-integer@v0.2.2-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-read-only@v0.2.2-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-assert-has-equal-values-indexed@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-fast-min@v0.3.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-without@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-ndarraylike2ndarray@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-normalize-index@v0.2.2-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-iter-stacks@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-numel@v0.2.2-esm/index.mjs";import{ndarray as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-dswap@v0.3.0-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@v0.2.2-esm/index.mjs";function g(g,u){var p,f,v,j,b,c,y,w,x,E,T,V,k;if(!e(g))throw new TypeError(h("invalid argument. First argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.",g));if(!e(u))throw new TypeError(h("invalid argument. Second argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.",u));if(r(g)||r(u))throw new Error("invalid argument. Cannot write to read-only array.");if(c=a(g),y=a(u),f=c.shape,v=y.shape,f.length<1)throw new TypeError(h("invalid argument. First argument must have at least one dimension."));if(v.length<1)throw new TypeError(h("invalid argument. Second argument must have at least one dimension."));if(!s(f,v))throw new Error("invalid arguments. The first and second arguments must have the shape.");if(arguments.length>2){if(!t(p=arguments[2]))throw new TypeError(h("invalid argument. Third argument must be a negative integer. Value: `%s`.",p))}else p=-1;if(E=n(f.length,v.length)-1,-1===(p=d(p,E)))throw new RangeError(h("invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.",-E,-1,arguments[2]));if(T=f[p],1===f.length)return l(T,c.data,c.strides[0],c.offset,y.data,y.strides[0],y.offset),u;for(V=o(i(f,p)),j=m(c,[p]),b=m(y,[p]),k=0;k<V;k++)w=j.next().value,x=b.next().value,l(T,w.data,w.strides[0],w.offset,x.data,x.strides[0],x.offset);return u}export{g as default};
//# sourceMappingURL=index.mjs.map
