{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64ndarrayLike from '@stdlib/assert-is-float64ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert-is-negative-integer';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport hasEqualValues from '@stdlib/array-base-assert-has-equal-values-indexed';\nimport min from '@stdlib/math-base-special-fast-min';\nimport without from '@stdlib/array-base-without';\nimport ndarraylike2ndarray from '@stdlib/ndarray-base-ndarraylike2ndarray';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport nditerStacks from '@stdlib/ndarray-iter-stacks';\nimport numel from '@stdlib/ndarray-base-numel';\nimport { ndarray as base } from '@stdlib/blas-base-dswap';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction dswap( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar xit;\n\tvar yit;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar N;\n\tvar i;\n\tif ( !isFloat64ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat64ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing double-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the arrays have the same shape...\n\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the shape.' );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Resolve the size of the interchange dimension:\n\tS = xsh[ dim ];\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( xsh.length === 1 ) {\n\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\t// Resolve the number of stacks:\n\tN = numel( without( xsh, dim ) );\n\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Interchange each pair of vectors...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dswap;\n"],"names":["dswap","x","y","dim","xsh","ysh","xit","yit","xc","yc","vx","vy","dm","S","N","i","isFloat64ndarrayLike","TypeError","format","isReadOnly","Error","ndarraylike2ndarray","shape","length","hasEqualValues","arguments","isNegativeInteger","min","normalizeIndex","RangeError","base","data","strides","offset","numel","without","nditerStacks","next","value"],"mappings":";;qrCAoEA,SAASA,EAAOC,EAAGC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAsBf,GAC3B,MAAM,IAAIgB,UAAWC,EAAQ,uHAAwHjB,IAEtJ,IAAMe,EAAsBd,GAC3B,MAAM,IAAIe,UAAWC,EAAQ,wHAAyHhB,IAEvJ,GAAKiB,EAAYlB,IAAOkB,EAAYjB,GACnC,MAAM,IAAIkB,MAAO,sDAWlB,GARAZ,EAAKa,EAAqBpB,GAC1BQ,EAAKY,EAAqBnB,GAG1BE,EAAMI,EAAGc,MACTjB,EAAMI,EAAGa,MAGJlB,EAAImB,OAAS,EACjB,MAAM,IAAIN,UAAWC,EAAQ,uEAE9B,GAAKb,EAAIkB,OAAS,EACjB,MAAM,IAAIN,UAAWC,EAAQ,wEAG9B,IAAMM,EAAgBpB,EAAKC,GAC1B,MAAM,IAAIe,MAAO,0EAGlB,GAAKK,UAAUF,OAAS,GAEvB,IAAMG,EADNvB,EAAMsB,UAAW,IAEhB,MAAM,IAAIR,UAAWC,EAAQ,4EAA6Ef,SAG3GA,GAAO,EAKR,GAFAS,EAAKe,EAAKvB,EAAImB,OAAQlB,EAAIkB,QAAW,GAEvB,KADdpB,EAAMyB,EAAgBzB,EAAKS,IAE1B,MAAM,IAAIiB,WAAYX,EAAQ,2FAA4FN,GAAK,EAAGa,UAAW,KAM9I,GAHAZ,EAAIT,EAAKD,GAGW,IAAfC,EAAImB,OAER,OADAO,EAAMjB,EAAGL,EAAGuB,KAAMvB,EAAGwB,QAAQ,GAAIxB,EAAGyB,OAAQxB,EAAGsB,KAAMtB,EAAGuB,QAAQ,GAAIvB,EAAGwB,QAChE/B,EAUR,IAPAY,EAAIoB,EAAOC,EAAS/B,EAAKD,IAGzBG,EAAM8B,EAAc5B,EAAI,CAAEL,IAC1BI,EAAM6B,EAAc3B,EAAI,CAAEN,IAGpBY,EAAI,EAAGA,EAAID,EAAGC,IACnBL,EAAKJ,EAAI+B,OAAOC,MAChB3B,EAAKJ,EAAI8B,OAAOC,MAChBR,EAAMjB,EAAGH,EAAGqB,KAAMrB,EAAGsB,QAAQ,GAAItB,EAAGuB,OAAQtB,EAAGoB,KAAMpB,EAAGqB,QAAQ,GAAIrB,EAAGsB,QAExE,OAAO/B,CACR"}