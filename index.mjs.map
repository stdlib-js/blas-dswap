{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as base } from '@stdlib/blas-base-dswap';\nimport factory from '@stdlib/blas-tools-swap-factory';\n\n\n// MAIN //\n\n/**\n* Interchanges two double-precision floating-point vectors.\n*\n* @name dswap\n* @type {Function}\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n* @throws {TypeError} first argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing double-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {Error} both input arrays must have the same shape\n* @throws {RangeError} third argument is out-of-bounds\n* @throws {Error} cannot write to read-only array\n* @returns {ndarrayLike} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* dswap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nvar dswap = factory( base, 'float64' );\n\n\n// EXPORTS //\n\nexport default dswap;\n"],"names":["dswap","factory","base"],"mappings":";;gMA4DG,IAACA,EAAQC,EAASC,EAAM"}